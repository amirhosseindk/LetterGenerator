@page "/edit/{LetterNumber}"
@inject ILetterService LetterService
@inject IDocumentGenerationService DocumentService
@inject NavigationManager Navigation

<h3>ویرایش نامه</h3>

@if (letter is null)
{
    <p>در حال بارگذاری نامه...</p>
}
else
{
    <div class="form-group">
        <input @bind="letter.Number" class="form-control" disabled />
        <textarea @bind="letter.Body" class="form-control" rows="6" />
        <input @bind="letter.RecipientName" class="form-control" />
        <input @bind="letter.RecipientPosition" class="form-control" />
        <input @bind="letter.SenderName" class="form-control" />
        <input @bind="letter.SenderPosition" class="form-control" />
        <input @bind="letter.Copy" class="form-control" />
    </div>

    <div class="mt-3">
        <button class="btn btn-success" @onclick="Save">💾 ذخیره تغییرات</button>
        <button class="btn btn-primary" @onclick="ExportWord">📄 خروجی Word</button>
        <button class="btn btn-warning" @onclick="ExportPdf">📑 خروجی PDF</button>
        <button class="btn btn-secondary" @onclick="Back">🔙 بازگشت</button>
    </div>
}

@code {
    [Parameter] public string LetterNumber { get; set; }
    LetterDto letter;

    protected override async Task OnInitializedAsync()
    {
        letter = await LetterService.GetByNumberAsync(LetterNumber);
    }

    async Task Save()
    {
        var dto = new UpdateLetterDto
            {
                Id = letter.Id,
                Number = letter.Number,
                Body = letter.Body,
                RecipientName = letter.RecipientName,
                RecipientPosition = letter.RecipientPosition,
                SenderName = letter.SenderName,
                SenderPosition = letter.SenderPosition,
                Copy = letter.Copy,
                HaveCopy = !string.IsNullOrWhiteSpace(letter.Copy),
                DateTimeLocal = letter.DateTimeLocal,
                ModifiedDateTimeUtc = DateTime.UtcNow,
                Username = "TestUser",
                DeviceType = Shared.Types.DeviceType.Web
            };

        await LetterService.UpdateAsync(dto);
    }

    async Task ExportWord()
    {
        var path = await DocumentService.GenerateWordAsync(MapToExport(letter));
    }

    async Task ExportPdf()
    {
        var path = await DocumentService.GeneratePdfAsync(MapToExport(letter));
    }

    ExportLetterDto MapToExport(LetterDto l) => new()
        {
            Number = l.Number,
            DateTimeLocal = l.DateTimeLocal,
            RecipientName = l.RecipientName,
            RecipientPosition = l.RecipientPosition,
            Body = l.Body,
            SenderName = l.SenderName,
            SenderPosition = l.SenderPosition,
            HaveCopy = l.HaveCopy,
            Copy = l.Copy
        };

    void Back() => Navigation.NavigateTo("/letters");
}